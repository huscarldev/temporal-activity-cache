[pytest]
# Async configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts =
    -v
    --strict-markers
    --tb=short
    --strict-config

# Markers
markers =
    unit: Unit tests that don't require external services
    integration: Integration tests with Temporal workflows
    slow: Tests that take longer to run (>1 second)
    redis: Tests that require a real Redis server
    race_condition: Tests for race conditions and concurrent access
    large_payload: Tests with large data payloads
    benchmark: Performance benchmark tests

# Coverage
[coverage:run]
source = src/temporal_activity_cache
omit =
    */tests/*
    */__pycache__/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
